stages:
  - test
  - deploy

# only allow piplines on merge requests, master commits and tags
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

default:
  image: johannesflake/oscar:latest


.unittest:
  stage: test
  interruptible: true
  script:
    - |
      julia --project=@. -e '
        using Pkg
        Pkg.build()
        Pkg.test(coverage=true)'
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success

.unittest-coverage:
  coverage: /Test coverage (\d+\.\d+%)/
  after_script:
    - |
      julia -e '
        using Pkg
        Pkg.add("Coverage")
        using Coverage
        cov = process_folder()
        display(map(x -> (x.filename, get_summary(x)), cov))
        println()
        c, t = get_summary(cov)
        using Printf
        @printf "Test coverage %.2f%%\n" 100c / t'
  artifacts:
    paths:
      - "**/*.cov"
    when: always

unittest-Julia 1.6 (LTS):
  image: johannesflake/oscar:julia-1.6
  extends:
    - .unittest

unittest-Julia 1.7:
  image: johannesflake/oscar:julia-1.7
  extends:
    - .unittest

unittest-Julia 1.8:
  image: johannesflake/oscar:julia-1.8
  extends:
    - .unittest
    - .unittest-coverage

# the compathelper job is only present in the branch "compathelper"

documenter:
  stage: deploy
  script:
    - |
      julia --project=docs -e '
        using Pkg
        Pkg.develop(PackageSpec(path=pwd()))
        Pkg.instantiate()
        using Documenter
        using PBWDeformations
        include("docs/make.jl")'
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG


# this does not have any effect. the working one is in the branch "pages"
pages:
  stage: deploy
  image: alpine:latest
  script:
  - echo 'Nothing to do...'
  artifacts:
    paths:
      - public
    expire_in: 1 day
  rules:
    - if: $CI_COMMIT_REF_NAME == "pages"
